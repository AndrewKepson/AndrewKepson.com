---
import { codeToHtml } from "shiki";

export interface CodeSnippetProps {
	title?: string;
	code: string;
	caption?: string;
	language?: string;
}

const THEME = "github-dark";
const DEFAULT_LANGUAGE = "text";

const { title, code, caption, language } = Astro.props as CodeSnippetProps;

function escapeHtml(value: string): string {
	return value
		.replaceAll("&", "&amp;")
		.replaceAll("<", "&lt;")
		.replaceAll(">", "&gt;")
		.replaceAll('"', "&quot;")
		.replaceAll("'", "&#39;");
}

async function highlight(source: string, lang?: string): Promise<string> {
	try {
		return await codeToHtml(source, {
			lang: lang ?? DEFAULT_LANGUAGE,
			theme: THEME,
		});
	} catch (error) {
		if (lang && lang !== DEFAULT_LANGUAGE) {
			try {
				return await codeToHtml(source, {
					lang: DEFAULT_LANGUAGE,
					theme: THEME,
				});
			} catch (fallbackError) {
				console.error("Failed to highlight code with fallback language:", fallbackError);
			}
		}
		console.error("Failed to highlight code:", error);
		return `<pre class="shiki plain"><code>${escapeHtml(source)}</code></pre>`;
	}
}

const highlightedHtml = await highlight(code, language);
---

<figure
	class:list={[
		"component-code-snippet",
		"bg-primary-500 border-secondary-100 my-8 overflow-hidden rounded-[8px] border shadow-sm"
	]}
	x-data="{
		async copy() {
			const text = this.$refs.code?.textContent ?? '';
			if (!text) {
				return;
			}

			try {
				if (navigator?.clipboard?.writeText) {
					await navigator.clipboard.writeText(text);
				} else {
					const textarea = document.createElement('textarea');
					textarea.value = text;
					textarea.setAttribute('readonly', '');
					textarea.style.position = 'absolute';
					textarea.style.left = '-9999px';
					document.body.appendChild(textarea);
					textarea.select();
					document.execCommand('copy');
					document.body.removeChild(textarea);
				}
			} catch (error) {
				console.error('Failed to copy code snippet:', error);
			}
		}
	}"
>
	<div class="border-secondary-100 bg-primary-400/50 flex items-center justify-between border-b px-4 py-2">
		<span class="font-display text-secondary-500 text-xs tracking-wide">{title}</span>
		<button
			type="button"
			class="font-body text-ink-300 hover:text-secondary-500 flex cursor-pointer items-center gap-1 text-xs transition-colors"
			data-copy-btn
			x-on:click.prevent="copy()"
		>
			<svg
				xmlns="http://www.w3.org/2000/svg"
				class="h-4 w-4"
				fill="none"
				viewBox="0 0 24 24"
				stroke="currentColor"
			>
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16h8M8 12h8m-8-4h8"></path>
			</svg>
			Copy
		</button>
	</div>
	<div
		class="font-code text-ink-400 prose-code:text-inherit prose-pre:bg-transparent prose-pre:p-0 overflow-x-auto px-6 py-4 text-sm leading-relaxed"
		data-code
		x-ref="code"
		set:html={highlightedHtml}
	></div>
	{caption && <figcaption class="font-body text-ink-300 px-6 pb-4 text-xs italic">{caption}</figcaption>}
</figure>
